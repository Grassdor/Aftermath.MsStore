stages:
  - build
  - deploy

variables:
  TAG_LATEST: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest
  TAG_COMMIT: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA
  APP_NAME: ${CI_PROJECT_NAMESPACE}-ms-store
  NODE_PORT: 8299
  STAGE: production

build:
  tags: [ deploy ]
  image: docker:git
  stage: build
  variables:
    DEBUG: ${DEBUG}
    POSTGRES__HOST: ${POSTGRES__HOST}
    POSTGRES__PORT: ${POSTGRES__PORT}
    POSTGRES__NAME: ${POSTGRES__NAME}
    POSTGRES__USER: ${POSTGRES__USER}
    POSTGRES__PASSWORD: ${POSTGRES__PASSWORD}
    POSTGRES__DSN: ${POSTGRES__DSN}
  services:
    - docker:dind
  script:
    - docker build -t $TAG_COMMIT -t $TAG_LATEST
      --build-arg DEBUG
      --build-arg POSTGRES__HOST
      --build-arg POSTGRES__PORT
      --build-arg POSTGRES__NAME
      --build-arg POSTGRES__USER
      --build-arg POSTGRES__PASSWORD
      --build-arg POSTGRES__DSN
      --build-arg STAGE
      .
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker push $TAG_COMMIT
    - docker push $TAG_LATEST
  when:
    manual

deploy:
  image: alpine:latest
  stage: deploy
  tags:
    - deployment
  script:
    - chmod og= $ID_RSA
    - apk update && apk add openssh-client
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull $TAG_COMMIT"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker container rm -f $APP_NAME || true"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run -dp $NODE_PORT:8000 --name $APP_NAME --restart always --add-host host.docker.internal:host-gateway $TAG_COMMIT"
  environment:
    name: production
  when:
    manual
